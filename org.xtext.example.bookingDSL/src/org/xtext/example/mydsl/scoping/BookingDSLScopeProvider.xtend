/*
 * generated by Xtext 2.24.0
 */
package org.xtext.example.mydsl.scoping

import org.eclipse.emf.ecore.EObject
import org.xtext.example.mydsl.bookingDSL.BookingDSLPackage.Literals
import org.xtext.example.mydsl.bookingDSL.Customer
import org.xtext.example.mydsl.bookingDSL.Resource
import org.xtext.example.mydsl.bookingDSL.Member
import org.xtext.example.mydsl.bookingDSL.Declaration
import org.xtext.example.mydsl.bookingDSL.Var
import org.eclipse.emf.ecore.EObject
import org.eclipse.emf.ecore.EReference
import org.eclipse.xtext.EcoreUtil2
import org.eclipse.xtext.scoping.IScope
import org.eclipse.xtext.scoping.Scopes
import java.util.HashSet
import java.util.ArrayList

/** 
 * This class contains custom scoping description.
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 */
class BookingDSLScopeProvider extends AbstractBookingDSLScopeProvider {
	override getScope(EObject context, EReference reference){
		if(context instanceof Var && reference==Literals.VAR__NAME){
			val seen = new HashSet<Declaration>
			var entity = EcoreUtil2.getContainerOfType(context,Declaration)
			val candidates = new ArrayList<Member>
			if(entity instanceof Customer){
				while(entity!==null) {
					if(seen.contains(entity)) return super.getScope(context, reference) // scope undefined
					seen.add(entity)
					candidates.addAll(entity.members.filter(Member))
					entity = entity.superType
				}
			}
			else if(entity instanceof Resource){
				while(entity!==null) {
					if(seen.contains(entity)) return super.getScope(context, reference) // scope undefined
					seen.add(entity)
					candidates.addAll(entity.members.filter(Member))
					entity = entity.superType
				}
			}else{
				candidates.addAll(entity.members.filter(Member))
			}
			
			return Scopes.scopeFor(candidates)
		}
		
		return super.getScope(context, reference)
	}
}
