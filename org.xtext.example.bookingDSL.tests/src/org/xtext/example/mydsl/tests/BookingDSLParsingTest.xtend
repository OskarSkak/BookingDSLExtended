/*
 * generated by Xtext 2.24.0
 */
package org.xtext.example.mydsl.tests

import org.eclipse.xtext.testing.InjectWith
import org.eclipse.xtext.testing.extensions.InjectionExtension
import org.eclipse.xtext.testing.util.ParseHelper
import org.junit.jupiter.api.Assertions
import org.junit.jupiter.api.Test
import org.junit.jupiter.api.^extension.ExtendWith
import static org.junit.Assert.assertTrue
import org.xtext.example.mydsl.bookingDSL.BookingDSLPackage
import javax.inject.Inject
import org.xtext.example.mydsl.parser.antlr.BookingDSLParser
import org.xtext.example.mydsl.bookingDSL.impl.SystemImpl
import org.xtext.example.mydsl.bookingDSL.Resource
import org.xtext.example.mydsl.bookingDSL.Booking
import org.xtext.example.mydsl.bookingDSL.System
import org.xtext.example.mydsl.bookingDSL.Schedule
import org.xtext.example.mydsl.bookingDSL.Entity
import org.xtext.example.mydsl.bookingDSL.Attribute

@ExtendWith(InjectionExtension)
@InjectWith(BookingDSLInjectorProvider)
class BookingDSLParsingTest {
	@Inject 
	ParseHelper<SystemImpl> parser
	
	
	@Test 
	def void T01_systemName(){
		val result = parser.parse('''
			system BookingSystem{
				
			}
		''')
		Assertions.assertNotNull(result)
		Assertions.assertTrue(result.name.equals("BookingSystem"))
	}
	
	@Test
	def void T02_resourceName(){
		val result = parser.parse('''
			system x {
				resource r{ }
			}
		''')
		Assertions.assertNotNull(result.name)
		Assertions.assertTrue(result.baseDeclaration.size==1)
		Assertions.assertTrue(result.baseDeclaration.get(0) instanceof Resource)
		Assertions.assertTrue((result.baseDeclaration.get(0) as Resource).name.equals("r"))
	}
	
	@Test
	def void T03_resourcesAttributeName(){
		val result = parser.parse('''
			system x {
				resource r{
					name : string
				}
			}
		''')
		Assertions.assertNotNull(result.baseDeclaration.get(0))
		Assertions.assertTrue(((result.baseDeclaration.get(0) as Resource).eContents.get(0) as Attribute).name.equals("name"))
	}
}
